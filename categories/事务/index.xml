<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>事务 on beanlam</title>
    <link>/categories/%E4%BA%8B%E5%8A%A1/</link>
    <description>Recent content in 事务 on beanlam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Mon, 27 Aug 2018 22:50:28 +0800</lastBuildDate>
    
	<atom:link href="/categories/%E4%BA%8B%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分布式事务概览</title>
      <link>/2018/distributed-transactions-intro/</link>
      <pubDate>Mon, 27 Aug 2018 22:50:28 +0800</pubDate>
      
      <guid>/2018/distributed-transactions-intro/</guid>
      <description>传统的事务 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。在关系数据库中，一个事务由一组SQL语句组成。事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。
 原子性：一个事务是一个不可分割的工作单位，事务中包括的操作要么全部完成，要么全部取消 一致性：事务使数据库从一个一致性状态转换为另一个一致性状态，事务的中间状态不可被观察到。 隔离性：一个事务内部的操作及使用的数据对并发中的其它事务是隔离的。 持久性：一个事务一旦被提交，其对数据库中数据的改变是永久性的，不因其它故障而受影响。  集中式数据库与分布式数据库 ACID 以一个学生管理系统为例，可以看到对于这个学生成绩管理系统，不同的系统使用角色，对它有不同的要求：
那么传统的事务 ACID属性，是如何帮助我们做到满足这些需求的呢？
数据量变大 而实际上，当我们考虑更大的数据量的时候，会发现，依赖于传统集中式数据库并无法很好地满足我们对系统的需求。当数据量变大，第一个要面对的问题是数据再也无法只放在一台机器上了，数据量的变大，意味着会有越来越多的客户端来查询这个数据库，那么就会出现查询的瓶颈，并且如果数据数非常重要的话，那么这些数据时丢不起的，而如果仅依赖于集中式数据库，那么当这个集中式数据库发生一些致命性的状况的时候，数据可能丢失。总而言之，对于集中式数据库来说，如果它出现了什么问题：不可查、丢数据等。那么其实意味着整个业务系统都陷入了不可用的状态。
总结下来，集中式数据库在通信、系统可靠性、可扩展性、性能瓶颈以及设计管理上，存在着明显的缺点：
 集中数据库会有多个成绩录入员，因为集中数据库只存在于某个服务器上，而成绩录入员却是分散在全国各地的，因此会造成额外的通信开销。 由于集中式数据库所有的数据都存在一个点上，那么一旦这个点发生故障，就会导致整个成绩管理系统停止运作，系统的可靠性差。 随着数据量的变大，录入的客户端变多，查询的客户端变多，那么存储系统本身的性能可能就会成为瓶颈，包括 CPU计算能力，IO吞吐能力，存储能力，都有可能成为瓶颈。 可扩展性差，正由于集中式数据库存在着性能差的问题，因此只能通过升级单机硬件能力的方式，实现数据库服务能力扩展，比如原来采用 MySQL 单机数据库，遇到访问瓶颈时更换磁盘，访问量更高时就需要考虑使用 Oracle 的商用解决方案、高端的存储设备、高端小型机，也就是 IOE 架构，甚至升级 IOE 设备，以换取更高的扩展和服务能力，这个过程就会存在设备升级和数据迁移的成本，其可扩展性的代价会面临巨大的成本问题。此外，根据摩尔定律，单机硬件能力的升级，并不能换来等比的效率加速比例，也就是说，增加多一倍的CPU核数，并不能带来一倍的性能提升，这个提升并不是线性的。 当一个系统的功能变得越来越复杂，例如说b不仅记录学生的成绩，还记录学生的奖惩历史，出勤情况，而数据库仍然只有一个点的情况下，集中数据库上承载的业务类型越来越多，导致管理困难。  传统集中式数据库虽然能够很好地保证业务一致性，但其面临高速增长的访问量和数据量时存在性能和处理能力上的瓶颈。
数据分布式存储 分布式数据库虽然引进了复杂性例如分布式事务的问题，但是分布式数据库能解决集中式数据库的大多数痛点。 分布式数据库与集中式数据库的区别主要在数据分布和可扩展性两方面：
 分布式数据库的数据分散存储，集中式数据库的数据集中存储。 分布式数据库的扩展高效并且性价比高，而集中式数据库不能无限扩容并且扩容存在着成本导致的性价比的问题。  总结起来，分布式数据库具有以下的特点：
 数据分布性，数据可以分布在不同的机器上，不同地理位置上。 数据统一性，虽然数据存放在不同的机器上，不同的地理位置上，但从整体上来看，它的系统逻辑应该是一致的 数据的透明性，虽然数据分散了，但是无论是查询还是更新，它们都应该有统一的入口 数据的安全性，单个数据节点如果出现错误，它不应该影响其它节点，从而数据库整体的安全性 数据的可扩展性，当现有集群称为瓶颈时，分布式数据库系统可以通过扩容来解决可扩展性的问题 数据的自治性，虽然数据分散存储，但每一个节点它都应该要能够独立管理自己的数据，同时又不影响整体的统一性。  分布式事务 在高速增长的访问量和数据量的背景下，为了解决单机性能瓶颈以及可扩展性等问题，数据库分库分表拆分和服务化（微服务）的运用越来越广泛。完成一个业务功能，可能需要横跨多个服务或者横跨多个数据库节点；也就是说，需要操作的资源位于多个资源服务器上，从业务的角度来看，需要保证对多个资源服务器的操作，要么全部成功，要么全部失败。从本质上来说，分布式事务要保证不同资源服务器上的数据一致性。
场景 典型的分布式事务场景主要有跨库事务、分库分表以及跨服务事务。
跨库事务 分库分表 当对数据库通过中间件代理的形式进行水平拆分后，不可避免的会在一个事务中操作多个分片节点 跨服务 在服务化的架构下，完成业务功能可能涉及到对多个服务的调用，而这些服务分别会操作不同的数据库。需要保证跨服务对数据库的操作要么都成功，要么都失败，这是服务化场景下面临的分布式问题。 X/Open DTP模型与XA规范 DTP 模型 X/Open DTP(X/Open Distributed Transaction Processing Reference Model) 是X/Open 这个组织定义的一套分布式事务的标准，也就是了定义了规范和API接口，由厂商进行具体的实现。</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发 on beanlam</title>
    <link>/categories/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on beanlam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Wed, 12 Sep 2018 17:33:59 +0800</lastBuildDate>
    
	<atom:link href="/categories/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>操作系统同步原语</title>
      <link>/2018/sync-primitive/</link>
      <pubDate>Wed, 12 Sep 2018 17:33:59 +0800</pubDate>
      
      <guid>/2018/sync-primitive/</guid>
      <description>竞态条件 在一般的操作系统中，不同的进程可能会分享一块公共的存储区域，例如内存或者是硬盘上的文件，这些进程都允许在这些区域上进行读写。 操作系统有一些职责，来协调这些使用公共区域的进程之间以正确的方式进行想要的操作。这些进程之间需要通信，需要互相沟通，有商有量，才能保证一个进程的动作不会影响到另外一个进程正常的动作，进而导致进程运行后得不到期望的结果。在操作系统概念中，通常用 IPC（Inter Process Communication，即进程间通信）这个名词来代表多个进程之间的通信。 为了解释什么是竞态条件（race condition），我们引入一个简单的例子来说明： 一个文件中保存了一个数字 n，进程 A 和进程 B 都想要去读取这个文件的数字，并把这个数字加 1 后，保存回文件。假设 n 的初始值是 0，在我们理想的情况下，进程 A 和进程 B 运行后，文件中 n 的值应该为 2，但实际上可能会发生 n 的值为 1。我们可以考量一下，每个进程做这件事时，需要经过什么步骤：
 读取文件里 n 的值 令 n = n + 1 把新的 n 值保存回文件。  在进一步解释竞态条件之前，必须先回顾操作系统概念中的几个知识点：
 进程是可以并发运行的，即使只有一个 CPU 的时候） 操作系统的时钟中断会引起进程运行的重新调度， 除了时钟中断，来自其它设备的中断也会引起进程运行的重新调度  假设进程 A 在运行完步骤 1 和 2，但还没开始运行步骤 3 时，发生了一个时钟中断，这个时候操作系统通过调度，让进程 B 开始运行，进程 B 运行步骤 1 时，发现 n 的值为 0，于是它运行步骤 2 和 3，最终会把 n = 1 保存到文件中。之后进程 A 继续运行时，由于它并不知道在它运行步骤 3 之前，进程 B 已经修改了文件里的值，所以进程 A 也会把 n = 1 写回到文件中。这就是问题所在，进程 A 在运行的过程中，会有别的进程去操作它所操作的数据。</description>
    </item>
    
    <item>
      <title>线程安全实现与 CLH 队列</title>
      <link>/2018/clh-queue/</link>
      <pubDate>Wed, 05 Sep 2018 17:40:29 +0800</pubDate>
      
      <guid>/2018/clh-queue/</guid>
      <description>阻塞同步 在 Java 中，我们经常使用 synchronized 关键字来做到互斥同步以解决多线程并发访问共享数据的问题。synchronzied 关键字在编译后，会在 synchronized 所包含的同步代码块前后分别加入 monitorenter 和 monitorexit 这两个字节码指令。synchronized 关键字需要指定一个对象来进行加锁和解锁。例如：
public class Main { private static final Object LOCK = new Object(); public static void fun1() { synchronized (LOCK) { // do something  } } public static void fun2() { synchronized (LOCK) { // do something  } } } 在没有明确指定该对象时，根据 synchonized 修饰的是实例方法还是静态方法，从而决定是采用对象实例或者类的class实例作为所对象。例如：
public class SynchronizedTest { public synchronized void doSomething() { //采用实例对象作为锁对象  } } public class SynchronizedTest { public static synchronized void doSomething() { //采用SynchronizedTest.</description>
    </item>
    
  </channel>
</rss>
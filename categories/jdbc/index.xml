<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdbc on beanlam</title>
    <link>/categories/jdbc/</link>
    <description>Recent content in jdbc on beanlam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Mon, 02 Jan 2017 21:58:47 +0800</lastBuildDate>
    
	<atom:link href="/categories/jdbc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JDBC4.2规范-第十一章 连接池</title>
      <link>/2017/jdbc4.2-spec-11/</link>
      <pubDate>Mon, 02 Jan 2017 21:58:47 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-11/</guid>
      <description>在基本的 DataSource 实现中，客户端的 Connection 对象与物理数据库连接有着1:1的关系。当 Connection 被关闭以后，物理连接也会被关闭。因此，连接的频繁打开、初始化以及关闭，会在一个客户端会话中上演多次，带来了过重的性能消耗。 而连接池就能解决这个问题，连接池维护了一系列物理数据库连接的缓存，可以被多个客户端会话重复使用。连接池能够极大地提高性能和可扩展性，特别是在一个三层架构的环境中，大量的客户端可以共享一个数量比较小的物理数据库连接池。在图11-1中，JDBC 驱动提供了一个 ConnectionPoolDataSource 的实现，应用服务器可以用它来创建和管理连接池。
连接池的管理策略跟具体的实现有关，也跟具体的应用服务器有关。应用服务器对客户端提供了一个 DataSource 接口的具体实现，使得连接池化对于客户端来说是透明的。最终，客户端使用 DataSource API 就能和之前使用 JNDI 一样，获得了更好的性能和可扩展性。
下文将会介绍 ConnectionPoolDataSource 接口、PooledConnection 接口以及 ConnectionEvent 类，这三个组成部分是一个相互合作的关系，下文将以一个经典线程池的实现的角度，逐步描述这几部分。这一章也会介绍基本的 DataSource 对象和池化的 DataSource 对象之间的区别，此外，还会讨论一个池化的连接如何能够维护一堆可重用的 PreparedStatement 对象。
尽管本章中的所有讨论都是假设在三层架构环境下的，但连接的池化在两层架构的环境下也同样有用。 在两层架构的环境中，JDBC 驱动既实现了 DataSource 接口，也实现 ConnectionPoolDataSource 接口，这种实现方式允许客户端打开或者关闭多个连接。
11.1 ConnectionPoolDataSource 和 PooledConnection 一般来说， 一个 JDBC 驱动会去实现 ConnectionPoolDataSource 接口，应用服务器可以使用这个接口来获得 PooledConnection 对象，以下代码展示了 getPooledConnection 方法的两种版本
public interface ConnectionPoolDataSource { PooledConnection getPooledConnection() throws SQLException; PooledConnection getPooledConnection(String user, String password) throws SQLException; } 一个 PooledConnection 对象代表一条与数据源之间的物理连接。JDBC 驱动对于 PooledConnection 的实现，则会封装所有与维护这条连接相关的细节。 应用服务器则会在它的 DataSource 接口的实现中，缓存和重用这些 PooledConnection。当客户端调用 DataSource.</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第十章 事务</title>
      <link>/2017/jdbc4.2-spec-10/</link>
      <pubDate>Mon, 02 Jan 2017 21:55:52 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-10/</guid>
      <description>事务用来提供数据集成性、正确的应用语义，以及并发访问时数据的一致性视图。所有符合 JDBC 规范的驱动都必须支持事务，JDBC 的事务管理 API 参照 SQL:2003 标准并且包含了以下的概念：
 自动提交模式 事务隔离级别 Savepoints  本章讨论单个连接上的事务，涉及多条连接的事务将会在第十二章《分布式事务》中讨论。
10.1 事务边界和自动提交 什么时候应该开启一个事务，是 JDBC 驱动或者底层的数据源做的一个隐式的决定，尽管有一些数据源支持 begin transaction 语句，但这个语句没有对应的 JDBC API。当一条 SQL 语句要求开启一个事务并且当前没有事务未执行完，那么新事务就会被开启。 Connection 有一个属性 autocommit 来表明什么时候应该结束事务。如果 autocommit 启用，那么每一条 SQL 语句完全执行后，都会自动执行事务的提交。以下几种情况，视为完全执行：
 对于 DML 语句来说，例如 Insert，Update，Delete；以及 DDL 语句。这些语句在数据源端执行完毕就代表语句完全执行。 对于 Select 语句来说，完全执行意味着对应的结果集被关闭。 对于 CallableStatement 对象或者对于那些返回多个结果集的语句，完全执行意味着所有的结果集都关闭，以及所有的影响行数和出参都被获取到了。  10.1.1 关闭自动提交模式 以下代码示范了如何关闭自动提交模式：
// Assume con is a Connection object con.setAutoCommit(false); 当关闭自动提交，必须显式地调用 Connection 的 commit 方法提交事务或者调用 rollback 方法回滚事务。这种处理方式是合理的，因为事务的管理工作不是驱动应该做的，应用层应该自己管理事务，例如：
 当应用需要将一组 SQL 组成一个事务的时候 当应用服务器管理事务的时候  autocommit 的默认值为 true，如果在一个事务的过程中，autocommit 的值被改变了，那么将会导致当前事务被提交。如果调用了 setAutocommit 方法，但没有改变原来的值，则不会产生其它附加影响，相当于没有调过一样。</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第九章 连接</title>
      <link>/2017/jdbc4.2-spec-9/</link>
      <pubDate>Mon, 02 Jan 2017 21:52:29 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-9/</guid>
      <description>一个 Connection 对象，表示了与某个数据源的一条连接，数据源的种类可以是关系型数据库，文件系统等等之类，只要有对应的 JDBC 驱动，都可以称之为数据源。应用程序使用 JDBC API 来维护多条连接，这些连接可能访问的是多个数据源，也可能访问的只是一个数据源。从 JDBC 驱动的角度来看，一个 Connection 对象就意味着一个客户端会话，一个会话会保持许多状态，例如用户 ID，一系列的 SQL Statement 以及结果集，也保存了当前使用的事务处理策略。
可以通过以下两种方式之一来获取一条连接：
 使用 DriverManager 这个类以及各种各样的驱动实现 使用 DataSource 类  更推荐使用 DataSource 对象来获取连接，因为这增强了应用的可移植性，使得代码更容易维护了，并且使得对连接池和分布式事务的使用更加地透明。所有的 Java EE 组件，都会使用 DataSource 对象来获取连接。
这一章将会介绍各种不同的 JDBC 驱动以及如何使用 Driver 接口、DriverManager 类以及基本的 DataSource 接口。关于连接池和分布式事务的介绍分别在第11章和第12章做介绍。
9.1 驱动的种类  Type 1 这种类型的 JDBC 驱动是对另外一种访问 API 的映射，比如说 ODBC，一般需要依赖本地库，这就导致了它的可移植性不行。JDBC-ODBC 桥就是这种类型的驱动。 Type 2 这种类型的 JDBC 驱动一部分是用 Java 语言写的，一部分是用本地代码写的。这种驱动使用一个本地的客户端库来连接数据源。由于对本地代码的使用，可移植性也不行。 Type 3 这种类型的驱动使用纯 Java 语言编写，但是通信的时候需要经过一个中间件，使用的是与数据库具体协议无关的独立协议。这个中间件转发客户端的请求给后面的数据源。 Type 4 这种类型的驱动使用纯 Java 语言编写，并且使用网络协议或者文件 IO 与具体的数据源通信，客户端直接与数据源连接。  9.</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第八章 异常</title>
      <link>/2017/jdbc4.2-spec-8/</link>
      <pubDate>Mon, 02 Jan 2017 21:49:40 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-8/</guid>
      <description>当访问一个数据源时发生错误或者警告，JDBC 用 SQLException 这个类及其子类来表示并提供相关的异常信息。
8.1 SQLException SQLException 由一下几部分组成：
 描述错误的文本信息。可以通过 SQLException.getMessage() 来获取。 一个 SQLState 对象。可以通过 SQLException.getSQLStateType() 来获取。 错误码，是某种错误类型的一个编码，int 类型，可以通过 SQLException.getErrorCode() 来获取。 底层的异常，是一个 Throwable 对象，用来代表引起 SQLException 发生的真正原因，通过 SQLException.getCause() 来获取。 异常链的引用，如果有不止一个 SQLException 异常，可以通过递归式地调用 SQLException.getNextException 来获取整个异常链，直到这个方法返回 null，异常链结束。  8.1.1 对 Java SE 异常链的支持 SQLException 和它的子类都支持 Java SE 的异常链机制，为了实现这个功能，有以下几个地方特意做了处理：
 增加额外的四个构造函数 支持对异常链的 For-Each 语法 getCause 方法不一定会返回 SQLException 类型或者其子类型  可以参考 JDBC API Java DOC 获取更详细的信息
8.1.2 遍历多个 SQLException 在一次 SQL 语句的执行中，很有可能会发生一个或者多个异常，多个异常之间有着相应的联系，这意味着，当捕获到一个 SQLException 时，它的背后可能还有多个 SQLException 链接在它身上，为了遍历这条异常链，通常可以通过循环调用 SQLException.</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第七章 数据库元数据</title>
      <link>/2017/jdbc4.2-spec-7/</link>
      <pubDate>Mon, 02 Jan 2017 21:45:57 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-7/</guid>
      <description>JDBC 驱动需要实现 DatabaseMetaData 这个接口，以便向驱动的使用者提供一些关于底层数据源的信息。这个接口主要被应用服务器以及一些工具型代码使用，以决定如何与一个数据源交互，应用程序有时候也会使用这个接口里的方法去获得数据源的信息，但这种用法并不是典型的用法。
DatabaseMetaData 这个接口拥有超过 150 个方法，这么多的方法，可以根据它们提供的信息的类型进行分类，信息类型有：
 关于数据源通用的信息 关于数据源是否支持某个特性或者是否具有某种能力的信息 数据源的限制 数据源有哪些 SQL 对象，以及这些 SQL 对象都拥有哪些属性 数据源是否支持事务  DatabaseMetaData 接口也拥有超过 40 个字段，当调用接口的方法时，这些字段常量会作为返回值。
本章会对 DatabaseMetaData 做一个概览，给出一些实例来验证接口定义的方法，并介绍一些新的方法。如果希望更深入地理解所有的方法，建议读者参考 JDBC API Specification。
 注意，JDBC 也定义了 ResultSetMetaData 接口，这个接口我们将会在第十五章遇见它。
 7.1 创建一个 DatabaseMetaData 对象 通过 Connection 接口的 getMetaData 方法来创建一个 DatabaseMetaData  对象。一旦这个对象创建完成，就可以使用这个对象动态地查询与底层数据源有关的信息。以下代码示例创建了一个 DatabaseMetaData 对象，并使用这个对象来获取底层数据源支持的表名最大字符数是多少
// 在这里 con 是一个 Connection 对象 DatabaseMetaData dbmd = con.getMetadata(); int maxLen = dbmd.getMaxTableNameLength(); 7.2 获取通用的信息 有一些 DatabaseMetaData 接口的方法用来动态地获取底层数据源的一些通用的信息和实现细节。例如以下这些方法：
 getURL getUserName getDatabaseProductVersion, getDriverMajorVersion 和 getDriverMinorVersion getSchemaTerm, getCatalogTerm 和 getProcedureTerm nullsAreSortedHigh 和 nullsAreSortedLow usesLocalFiles 和 usesLocalFilePerTable getSQLKeyword  7.</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第六章 遵守规范</title>
      <link>/2017/jdbc4.2-spec-6/</link>
      <pubDate>Mon, 02 Jan 2017 21:41:10 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-6/</guid>
      <description>本章指出了实现一个 JDBC 驱动所需要遵守的规范，在本章中没有指出的规范，则作为可选项来遵守。
6.1 准则与要求 以下的准则是 JDBC API 规范要求实现者遵守的基本准则
  JDBC API 的实现者必须支持 Entry Level SQL92 标准，以及  Drop Table 命令。对 Entry Level SQL92 标准的支持是实现 JDBC API 的最小要求，对于 SQL99 和 SQL2003 特性的实现，必须遵照 SQL99 和 SQL2003 的规范。
  JDBC 驱动必须支持转义语法，转义语法在 第十三章 中有详细解释。
  JDBC 驱动必须支持事务，参考 第十章。
  如果 DatabaseMetaData 的某个方法指明某个特性的可用的，那么驱动必须根据这个特性的相关规范中规定的标准语法实现这个特性，如果该特性需要使用到数据源的原生 API 或者是 SQL 方言，那么由驱动负责实现从标准 SQL 语法到原生 API 或者 SQL 方言的映射关系。如果支持了某个特性，那么 DatabaseMetaData 中与这个特性相关的方法也必须提供实现。比如说，如果一个驱动实现了 RowSet 接口，那么它也应该实现 RowSetMetaData 接口。
  驱动必须提供对底层数据源特性的访问方式，包括扩展了 JDBC API 的特性。这么规定的目的是能让使用了 JDBC API 的应用程度能像数据源的原生程序一样，访问与数据源有关的特性。</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第五章 类与接口</title>
      <link>/2017/jdbc4.2-spec-5/</link>
      <pubDate>Mon, 02 Jan 2017 13:55:10 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-5/</guid>
      <description>以下的类和接口，组成了 JDBC API
5.1 java.sql包 JDBC API 的核心部分都藏在了 java.sql 这个包里，所有的枚举类，普通类以及接口，都在下方列了出来，其中，枚举和普通类是粗体，接口是正常字体。
java.sql.Array
java.sql.BatchUpdateException
java.sql.Blob
java.sql.CallableStatement
java.sql.Clob
java.sql.ClientinfoStatus
java.sql.Connection
java.sql.DataTruncation
java.sql.DatabaseMetaData
java.sql.Date
java.sql.Driver
java.sql.DriverAction
java.sql.DriverManager
java.sql.DriverPropertyInfo
java.sql.JDBCType
java.sql.NClob
java.sql.ParameterMetaData
java.sql.PreparedStatement
java.sql.PseudoColumnUsage
java.sql.Ref
java.sql.ResultSet
java.sql.ResultSetMetaData
java.sql.RowId
java.sql.RowIdLifeTime
java.sql.Savepoint
java.sql.SQLClientInfoException
java.sql.SQLData
java.sql.SQLDataException
java.sql.SQLException
java.sql.SQLFeatureNotSupportedException
java.sql.SQLInput
java.sql.SQLIntegrityConstraintViolationException
java.sql.SQLInvalidAuthorizationSpecException
java.sql.SQLNonTransientConnectionException
java.sql.SQLNonTransientException
java.sql.SQLOutput
java.sql.SQLPermission
java.sql.SQLSyntaxErrorException
java.sql.SQLTimeoutException
java.sql.SQLTransactionRollbackException
java.sql.SQLTransientConnectionException
java.sql.SQLTransientException
java.sql.SQLType
java.sql.SQLXML
java.sql.SQLWarning
java.sql.Statement
java.sql.Struct
java.sql.Time
java.sql.Timestamp
java.sql.Types
java.sql.Wrapper
下面这些类和接口是在 JDBC 4.2 API 中新增加或有过改动的，其中新增加的类和接口以粗体的形式表示
java.sql.BatchUpdateException
java.sql.CallableStatement
java.sql.Connection
java.sql.DatabaseMetaData</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第四章 JDBC API 概览</title>
      <link>/2017/jdbc4.2-spec-4/</link>
      <pubDate>Mon, 02 Jan 2017 13:46:42 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-4/</guid>
      <description>JDBC API 给 Java 程序提供了一种访问一个或者多个数据源的途径，在大多数情况下，数据源是关系型数据库，使用 SQL 语言来访问。但是，JDBC Driver 也可以实现为能够访问其它类型的数据源，比如说文件系统或面向对象的系统。 JDBC API 最主要的动机就是提供一种标准的 API ，让应用程序访问多种多样的数据源。
这一章介绍了 JDBC API 的一些关键概念，此外，也介绍 JDBC 程序的两种使用场景，分别是两层模型和三层模型，在不同的场景中，JDBC API 的功能是不一样的。
4.1 建立连接 JDBC API 定义了 Connection 接口来代表与某个数据源的一条连接。
典型情况下，JDBC 应用可以使用以下两种机制来与目标数据源建立连接
  DriverManager — 这个类从 JDBC API 1.0 版本开始就有了，当应用程序第一次尝试去连接一个数据源时，它需要指定一个url，DriverManager 将会自动加载所有它能在 CLASSPATH 下找到的 JDBC 驱动（任何 JDBC API 4.0 版本前的驱动，需要手动去加载）。
  DataSource — 这个接口在 JDBC 2.0 Optionnal Package API 中首次被引进，更推荐使用 DataSource， 因为它允许关于底层数据源的具体信息对于应用来说是透明的。需要设置 DataSource 对象的一些属性，这样才能让它代表某个数据源。当这个接口的 getConnection 方法被调用时，这个方法会返回一条与数据源建立好的连接。应用程序可以通过改变 DataSource 对象的属性，从而让它指向不同的数据源，无须改动应用代码；同时 DataSource 接口的具体实现类也可以在不改动应用程序代码的情况下，进行改变。</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第三章 新特性</title>
      <link>/2017/jdbc4.2-spec-3/</link>
      <pubDate>Mon, 02 Jan 2017 13:42:51 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-3/</guid>
      <description>JDBC API 4.2 规范在以下几个方面有所改动
3.1 增加对 REF CURSOR 的支持 有些数据库支持 REF CURSOR 数据类型，在调用存储过程后返回该类型的结果集。
3.2 支持大数量的更新 JDBC 当前的方法里返回一个更新数量时，返回的是一个 int，在某些场景下这会导致问题，因为数据集还在不停地增长。
3.3 增加 java.sql.DriverAction 接口 如果一个 driver 想要在它被 DriverManager 注销时得到通知，就要实现这个接口。
3.4 增加 java.sql.SQLType 接口 用来创建一个代表 SQL 类型的对象
3.5 增加 java.sql.JDBCType 枚举类 用来识别通用的 SQL 类型，目的是为了取代定义在 Types.java 类里的常量。
3.6 增加 Java Object 类型与 JDBC 类型的映射（附录表B-4） 增加 java.time.LocalDate 映射到 JDBC DATE
增加 java.time.LocalTime 映射到 JDBC TIME
增加 java.time.LocalDateTime 映射到 JDBC TIMESTAMP
增加 java.time.LocalOffsetTime 映射到 JDBC TIME_WITH_TIMEZONE</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第二章 目标</title>
      <link>/2017/jdbc4.2-spec-2/</link>
      <pubDate>Mon, 02 Jan 2017 13:40:18 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-2/</guid>
      <description>2.1 JDBC API 的历史 JDBC API 是一种成熟的技术，1997 年， 首次提出了 JDBC 规范，初始的版本中， JDBC API 仅提供一套针对数据库的调用级别接口。
从 2.0 版本和 2.1 版本开始，JDBC API 的功能得到增强，它能够支持更高级别的应用程序， 也提供一些高级特性，供开发应用服务器的开发者使用。
3.0 版本小范围地补充了一些遗漏的功能。
4.2 版本的目标主要有两个
 增强应用程序开发者对于 “简易开发” 的体验 增强企业应用级别的特性，提供一些工具集和 API 来更好地管理数据源  2.2 JDBC API 的目标 下面列出了 JDBC API 的目标和设计理念
2.2.1 与 Java EE 和 Java SE 平台无缝融合 JDBC API 是 Java 平台的一部分，JDBC 4.2 API 应该跟随着 Java SE 平台和 Java EE 平台的大方向走，对于 Java 语言的新特性和改进，都应该也体现在 JDBC API 4.2 的规范中。</description>
    </item>
    
    <item>
      <title>JDBC4.2规范-第一章 简介</title>
      <link>/2017/jdbc4.2-spec-1/</link>
      <pubDate>Mon, 02 Jan 2017 13:34:42 +0800</pubDate>
      
      <guid>/2017/jdbc4.2-spec-1/</guid>
      <description>1.1 JDBC API 简介 JDBC API 为 Java 语言提供了一种访问关系型数据库的方法。有了 JDBC API，应用程序便可以通过它来执行 SQL 语句、获取执行结果，以及对底层的数据库进行写入。JDBC API 也可以用来和多个数据源交互，这些数据源以分布式的形式部署。
JDBC API 基于 X/Open SQL CLI 标准，ODBC 也以它为标准。对于 X/Open SQL CLI 标准所定义的一些抽象概念，JDBC API 提供了对应的概念的映射，并且非常易用以及容易理解。
自从 1997 年 JDBC API 首次被提出以后， 它的被接受程度越来越大，并且也出现了大量的对于 JDBC API 规范的实现，这都归功于 JDBC API 本身的灵活性。
1.2 平台 JDBC API 是 Java 语言的一部分，JDBC API 分为两个 package，分别是 java.sql 和 javax.sql。在 Java SE 平台和 Java EE 平台都存在这两个 package。
1.3 目标读者  需要实现相应的驱动的数据库厂商 需要在 JDBC 驱动上建立多层服务的应用服务器厂商 需要基于 JDBC API 来开发应用的厂商  本文档也适用于任何在 JDBC API 上层开发应用的开发者</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文摘 on beanlam</title>
    <link>/categories/%E6%96%87%E6%91%98/</link>
    <description>Recent content in 文摘 on beanlam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Thu, 28 Feb 2019 17:50:09 +0800</lastBuildDate>
    
	<atom:link href="/categories/%E6%96%87%E6%91%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《编程大师访谈录》文摘1</title>
      <link>/2019/master-interview-pick-1/</link>
      <pubDate>Thu, 28 Feb 2019 17:50:09 +0800</pubDate>
      
      <guid>/2019/master-interview-pick-1/</guid>
      <description>查尔斯.西蒙尼 人物介绍 1948年9月10日，查尔斯·西蒙尼（Charles Simonyi）出生于匈牙利布达佩斯。上高中时，他开始接触计算机和编程，父亲安排他给一名从事计算机工作的工程师当助手，当时计算机在匈牙利屈指可数。
1966年，查尔斯高中毕业，同时也完成了他的第一个编译器。凭借开发编译器时积累的经验，他在丹麦哥本哈根的A/S Regnecentralen公司谋得了一个职位。
1968年，他离开丹麦进入美国加州大学伯克利分校学习，并于1972年获得理学学士学位，1977年获得斯坦福大学博士学位。
西蒙尼曾先后在加州大学伯克利分校计算机中心、伯克利计算机公司、ILLIAC 4项目和施乐PA R C工作。自1981年以来，他一直供职于微软公司。在施乐公司，他开发了Alto个人电脑的Bravo和Bravo X程序。在微软，他组建了应用软件小组，并领导开发出Multiplan、Microsoft Word、Microsoft Excel等广受欢迎的应用软件。
编程的步骤 编程的第一步是想象。就是要在脑海中对来龙去脉有极为清晰的把握。在这个初始阶段，我会使用纸和铅笔。我只是信手涂鸦，并不写代码。我也许会画些方框或箭头，但基本上只是涂鸦，因为真正的想法在我脑海里。我喜欢想象那些有待维护的结构，那些结构代表着我想编码的真实世界。一旦这个结构考虑得相当严谨和明确，我便开始写代码。我会坐到终端前，或者换在以前的话，就会拿张白纸，开始写代码。这相当容易。我只要把头脑中的想法变换成代码写下来，我知道结果应该是什么样的。大部分代码会水到渠成，不过我维护的那些数据结构才是关键。我会先想好数据结构，并在整个编码过程中将它们牢记于心。
团队大小 让多名程序员开发一个程序，开发速度会更快吗？ 不一定。编写同一个程序的人员越多，人均产出的实际代码量越少。结果，总的代码产出一开始会更多，之后实际上可能会减少。以两个人为例，也许单位时间只能多写百分之五十的代码。
顺便提一下，代码的效率还会随着开发同一个程序的人员数量的增加而有所降低。最高效的程序往往是一个人写的。唯一的问题是，它可能需要写上一辈子，而这显然是无法接受的。因此你需要找上三五十个，甚或好几百个人开发一个项目
巴特勒.兰普森 人物介绍 巴特勒·兰普森（Butler Lampson），目前在加州帕洛阿尔托数字设备公司（Digital Equipment Corporation，下文简称DEC①公司）系统研究中心担任高级工程师，他曾是加州大学伯克利分校计算机科学副教授、伯克利计算机公司创始人、施乐PA R C计算机科学实验室的高级研究员。
兰普森是业界最受敬重的专家之一，在许多计算机设计和研究领域都颇有建树。他开发过硬件系统，如以太网局域网和Alto、Dorado个人电脑；操作系统，如SDS 940和Alto；编程语言，如LISP和Mesa；应用程序，如Bravo编辑器和Star办公系统；还有网络服务器，如Dover打印机和Grapevine邮件系统。
物理、数学和计算机科学的联系 就物理学和数学而言，一如其他正统的学科，要想有所成就，必须能够清晰地思考。这就是计算机行业的许多成功人士都来自这些领域的原因所在。而现在人们通常一直待在计算机系，要有所成就会更加困难，因为这是一门非常浅显的学科，无法驱使你全力发挥出自己的聪明才智。
通过数学，你学会逻辑推理。你还会学到如何证明，以及怎么处理抽象要素。通过物理学等实验科学或人文学科，你学会如何应用这些抽象在现实中建立联系。
复杂性与简单性 一切都应该尽可能简单。但要做到这一点你必须掌握复杂性。
控制复杂性有一些基本技巧。从根本上，我会分而治之，把事情分解开，并准确描述各个部分应该实现什么功能。这会变成接下来如何行事的纲要。如果你还没想清楚怎么写规格，那表明你不明白具体是怎么回事。接着，你有两种选择：要么退回到你真正理解的另外某个问题上，要么更努力地思考。
此外，系统的描述不应该太庞大。也许你必须从多个较小部分的角度来考虑一个大系统。这有点像解数学题：你写的书可以包含许多有用的提示，但不能直接给出算法
约翰.沃诺克 人物介绍 约翰·沃诺克（John Warnock）出生于1940年，在犹他州长大，就读于犹他大学，并获得了数学学士和硕士学位，以及计算机科学博士学位。 沃诺克担任Adobe公司的CEO，除了Adobe公司，沃诺克还曾担任Ebrary、MongoNet、Knight-Ridder、Netscape等公司董事，目前仍然是Salon媒体集团董事会主席。他亦曾是圣何塞市创新科技馆的主席，目前还在美国电影协会和圣丹斯协会担任理事。
编程的诀窍 不要早作绑定，尽可能推迟决定时间。眼界放宽一些，设计要比你自认为需要的程度更加灵活，因为从长远看你最终会需要这样。快速让某样东西工作起来，然后还能弃之不用。
从小的开始实验而不是大的入手学习。不要一头扎进周期长达两年且中间不出什么成果的开发当中。最好每两个月就要出点成果，这样你才能进行评估、重组和重新开始。
程序员经常在一开始时过度定义他们的方法。他们可能会从一个中心构思着手，从第一天就开始编码。然后他们发现自己陷入重围，每件东西都开始膨胀，因为它们依赖于太多其他因素。应当反其道而行之，如果让过程较为宽松，保持一定的自由度，并在最后阶段加快速度，长远来说，你会做出更好的产品。
加里.基尔戴尔 人物介绍 作为数字化研究所（DRI）的创始人和董事会主席，加里·A. 基尔代尔（Gary A. Kildall）于1972年到1973年间开发了第一个微机操作系统。他把那个系统称为CP/M（控制程序/监控程序）操作系统，后来成为他们公司的第一款产品。此外，他为IBM个人计算机设计了DR Logo编程语言，并开发出微机上最早的高级计算机语言之一，PL/1。
基尔代尔是西雅图人，生于1942年5月19日。他于1972年获得华盛顿大学计算机科学博士学位，随后加入了海军，并且执教于加利福尼亚州蒙特雷的美国海军研究生院，讲授计算机科学。从海军退役后他仍旧在那里继续执教。
基尔代尔于1984年创建了一家名为Activenture的新公司（最近已更名为KnowledgeSet公司），以探索光盘出版业的潜力。Activenture公司于1985年宣布，他们将出版光盘版的《格罗利尔多媒体百科全书》。基尔代尔在担任KnowledgeSet公司总裁的同时，仍旧担任着数字化研究所董事会主席一职。
编程风格 我遵循非常明确的、适合自己的流程，虽然这些流程可能并不适合别人。我会先画数据结构，然后花很长时间思考数据结构。在开始编程前，我会一直思考整个程序的流程。
在确定数据结构之后，我就开始写一些小段的代码，并不断地改善和监测。在编码过程中进行测试可以确保所做的修改是局部的，并且如果有什么问题的话，能够马上发现。整个迭代改进的过程是需要速度的，至少对我来说，一个快速的编辑、执行和调试周期是非常重要的。
编程是否可以练习 嗯，在某种意义上是可以练习的。计算机语言（标识语）的发明家西摩·佩伯特（Seymour Papert）认为孩子们可以通过摆弄齿轮等机械小玩意而变得具有创造性。通过这种玩耍而学习和练习的技能会转移到其他领域。佩伯特的观点正是我童年的经历。我父亲是一名技艺精湛的工匠。我常常待在旁边看他干活，一看就是好几个小时，然后跑到外面，拿起锤子和钉子模仿他。
作为编程基础的数据结构，从本质上看是机械的，就像我儿时玩的东西。所以，在这个意义上讲，我是可以练习编程的。最大的不同是，木制或铁制的东西需要花好几个小时来建造，如果做得不正确，必须回去重新做。而程序可以在瞬间完成修改。
程序员积累本领的方式 你需要学习其他人的工作。他们解决问题的方法和他们使用的工具会让你以一个新的视角来审视自己的工作。在写程序前只需要学习一组为数不多的程序模块。例如，要写编译器，首先要写的是扫描功能，那是一个会用到很多次的小工具。一旦学会了这些工具，剩下的工作就只是把它们组合在一起。这里弄点儿、那里弄点儿，把这些功能模块都放到一起。查看其他人编写的程序可以为你提供构建条理清晰的代码的新思路。这就是为什么作为一个老师，我会花很多时间和学生们在一起，向他们展示我搜罗来的清晰算法模块的原因。
程序员的工作节奏 我的步调在程序开发的各个阶段是不同的。在某些时候，代码如泉涌一般，所有的东西都同时出现在脑海中：所有的变量名，变量之间的相互联系，指针从哪里开始、在哪里结束，磁盘的访问等。各种各样的事情都浮现在脑海里，因为我不停地修改自己的想法，所以没有办法写在纸上。我花在设计上的时间比花在编码上的时间多，而且我从来没有在合理的时间内完成过一个项目。
当数据结构还在雏形时，需要高度集中注意力，让它们在脑海中成形。在这个阶段我通常会在早上3点开始工作，一直干到大约下午6点，然后吃晚饭，早一点上床睡觉，再很早地起床，不断推敲构思，直到数据结构定下来。
在平静的时候，我的工作节奏会放松一些，我会提出下一阶段的解决方案。我会有步骤地去解决问题，先把问题排好次序，然后一次一个步骤地去解决——步骤A，步骤B，然后步骤C。我试过了，除非把步骤B做完，否则就无法做步骤C。
比尔.盖茨 人物介绍 作为微软的CEO，威廉·H.</description>
    </item>
    
  </channel>
</rss>
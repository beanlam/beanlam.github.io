<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on beanlam</title>
    <link>/categories/redis/</link>
    <description>Recent content in redis on beanlam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Wed, 07 Jun 2017 22:46:50 +0800</lastBuildDate>
    
	<atom:link href="/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>redis 主从配置</title>
      <link>/2017/redis-master-slave-config/</link>
      <pubDate>Wed, 07 Jun 2017 22:46:50 +0800</pubDate>
      
      <guid>/2017/redis-master-slave-config/</guid>
      <description>概述 Redis的replication机制允许slave从master那里通过网络传输拷贝到完整的数据备份。具有以下特点：
 异步复制。从2.8版本开始，slave能不时地从master那里获取到数据。 允许单个master配置多个slave slave允许其它slave连接到自己。一个slave除了可以连接master外，它还可以连接其它的slave。形成一个图状的架构。 master在进行replication时是非阻塞的，这意味着在replication期间，master依然能够处理客户端的请求。 slave在replication期间也是非阻塞的，也可以接受来自客户端的请求，但是它用的是之前的旧数据。可以通过配置来决定slave是否在进行replication时用旧数据响应客户端的请求，如果配置为否，那么slave将会返回一个错误消息给客户端。不过当新的数据接收完全后，必须将新数据与旧数据替换，即删除旧数据，在替换数据的这个时间窗口内，slave将会拒绝客户端的请求和连接。 一般使用replication来可以实现扩展性，例如说，可以将多个slave配置为“只读”，或者是纯粹的数据冗余备份。 能够通过replication来避免master每次持久化时都将整个数据集持久化到硬盘中。只需把master配置为不进行save操作(把配置文件中save相关的配置项注释掉即可)，然后连接上一个slave，这个slave则被配置为不时地进行save操作的。不过需要注意的是，在这个用例中，必须确保master不会自动启动。更多详情请继续往下读。  Master持久化功能关闭时Replication的安全性 当有需要使用到replication机制时，一般都会强烈建议把master的持久化开关打开。即使为了避免持久化带来的延迟影响，不把持久化开关打开，那么也应该把master配置为不会自动启动的。
为了更好地理解当一个不进行持久化的master如果允许自动启动所带来的危险性。可以看看下面这种失败情形：
 假设我们有一个redis节点A，设置为master，并且关闭持久化功能，另外两个节点B和C是它的slave，并从A复制数据。 如果A节点崩溃了导致所有的数据都丢失了，它会有重启系统来重启进程。但是由于持久化功能被关闭了，所以即使它重启了，它的数据集是空的。 而B和C依然会通过replication机制从A复制数据，所以B和C会从A那里复制到一份空的数据集，并用这份空的数据集将自己本身的非空的数据集替换掉。于是就相当于丢失了所有的数据。
 即使使用一些HA工具，比如说sentinel来监控master-slaves集群，也会发生上述的情形，因为master可能崩溃后迅速恢复。速度太快而导致sentinel无法察觉到一个failure的发生。
当数据的安全很重要、持久化开关被关闭并且有replication发生的时候，那么应该禁止实例的自启动。
replication工作原理 如果你为master配置了一个slave，不管这个slave是否是第一次连接上Master，它都会发送一个SYNC命令给master请求复制数据。
master收到SYNC命令后，会在后台进行数据持久化，持久化期间，master会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。当持久化进行完毕以后，master会把这份数据集发送给slave，slave会把接收到的数据进行持久化，然后再加载到内存中。然后，master再将之前缓存在内存中的命令发送给slave。
当master与slave之间的连接由于某些原因而断开时，slave能够自动重连Master，如果master收到了多个slave并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送给多个并发连接的slave。
当master和slave断开重连后，一般都会对整份数据进行复制。但从redis2.8版本开始，支持部分复制。
数据部分复制 从2.8版本开始，slave与master能够在网络连接断开重连后只进行部分数据复制。
master会在其内存中创建一个复制流的等待队列，master和它所有的slave都维护了复制的数据下标和master的进程id，因此，当网络连接断开后，slave会请求master继续进行未完成的复制，从所记录的数据下标开始。如果进程id变化了，或者数据下标不可用，那么将会进行一次全部数据的复制。
支持部分数据复制的命令是PSYNC
不需硬盘参与的Replication 一般情况下，一次复制需要将内存的数据写到硬盘中，再将数据从硬盘读进内存，再发送给slave。
对于速度比较慢的硬盘，这个操作会给master带来性能上的损失。Redis2.8版本开始，实验性地加上了无硬盘复制的功能。这个功能能将数据从内存中直接发送到slave，而不用经过硬盘的存储。
 不过这个功能目前处于实验阶段，还未正式发布。
 相关配置 与replication相关的配置比较简单，只需要把下面一行加到slave的配置文件中：
slaveof 192.168.1.1 6379 你只需要把ip地址和端口号改一下。当然，你也可以通过客户端发送SLAVEOF命令给slave。
部分数据复制有一些可调的配置参数，请参考redis.conf文件。
无硬盘复制功能可以通过repl-diskless-sync来配置，另外一个配置项repl-diskless-sync-delay用来配置当收到第一个请求时，等待多个slave一起来请求之间的间隔时间。
只读的slave 从redis2.6版本开始，slave支持只读模式，而且是默认的。可以通过配置项slave-read-only来进行配置，并且支持客户端使用CONFIG SET命令来动态修改配置。
只读的slave会拒绝所有的写请求，只读的slave并不是为了防范不可信的客户端，毕竟一些管理命令例如DEBUG和CONFIG在只读模式下还是可以使用的。如果确实要确保安全性，那么可以在配置文件中将一些命令重新命名。
也许你会感到很奇怪，为什么能够将一个只读模式的slave恢复为可写的呢，尽管可写，但是只要slave一同步master的数据，就会丢失那些写在slave的数据。不过还是有一些合法的应用场景需要存储瞬时数据会用到这个特性。不过，之后可能会考虑废除掉这个特性。
Setting a slave to authenticate to a master
如果master通过requirepass配置项设置了密码，slave每次同步操作都需要验证密码，可以通过在slave的配置文件中添加以下配置项：
masterauth &amp;lt;password&amp;gt; 也可以通过客户端在运行时发送以下命令：
config set masterauth &amp;lt;password&amp;gt; 至少N个slave才允许向master写数据 从redis2.8版本开始，master可以被配置为，只有当master当前有至少N个slave连接着的时候才接受写数据的请求。
然而，由于redis是异步复制的，所以它并不能保证slave会受到一个写请求，所以总有一个数据丢失的时间窗口存在。
这个机制的工作原理如下所示：
 slave每秒发送ping心跳给master，询问当前复制了多少数据。 master会记录下它上次收到某个slave的ping心跳是什么时候。 使用者可以配置一个时间，来指定ping心跳的发送不应超过的一个超时时间  如果master有至少N个slave，并且ping心跳的超时不超过M秒，那么它就会接收写请求。</description>
    </item>
    
    <item>
      <title>redis sort 命令详解</title>
      <link>/2017/redis-sort-explain/</link>
      <pubDate>Wed, 07 Jun 2017 22:24:47 +0800</pubDate>
      
      <guid>/2017/redis-sort-explain/</guid>
      <description>基本使用 命令格式：
SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination] 默认情况下，排序是基于数字的，各个元素将会被转化成双精度浮点数来进行大小比较，这是SORT命令最简单的形式，也就是下面这种形式：
SORT mylist 如果mylist是一个包含了数字元素的列表，那么上面的命令将会返回升序排列的一个列表。如果想要降序排序，要使用DESC描述符，如下所示：
SORT mylist DESC 如果mylist包含的元素是string类型的，想要按字典顺序排列这个列表，那么就要用到ALPHA描述符，如下所示：
SORT mylist ALPHA Redis是基于UTF-8编码来处理数据的, 要确保你先设置好了!LC_COLLATE环境变量。
对于返回的元素个数也是可以进行限制的，只需要使用LIMIT描述符。使用这个描述符，你需要提供偏移量参数，来指定需要跳过多少个元素，返回多少个元素。 下面这个例子将会返回一个已经排序好了的列表中的10个元素，从下标为0开始：
SORT mylist LIMIT 0 10 几乎全部的描述符都可以同时使用。例如下面这个例子所示，它将会返回前5个元素，以字典顺序降序排列：
SORT mylist LIMIT 0 5 ALPHA DESC 通过外部key来排序 有时候，你会想要用外部的key来作为权重去排列列表或集合中的元素，而不是使用列表或集合中本来就有的元素来排列。 下面以一个例子来解释： 假设现在有一张这样的表，有商品id，商品价格，以及商品的重量。
   gid price_{gid} weight_{gid}     1 20 3   2 40 2   3 30 4   4 10 1    首先将上述表格的数据导入到redis中(redis版本：2.</description>
    </item>
    
    <item>
      <title>Jedis的Sharded源代码分析</title>
      <link>/2015/jedis-sharded-explain/</link>
      <pubDate>Mon, 20 Apr 2015 18:53:03 +0800</pubDate>
      
      <guid>/2015/jedis-sharded-explain/</guid>
      <description>概述 Jedis是Redis官方推荐的Java客户端，更多Redis的客户端可以参考Redis官网客户端列表。当业务的数据量非常庞大时，需要考虑将数据存储到多个缓存节点上，如何定位数据应该存储的节点，一般用的是一致性哈希算法。Jedis在客户端角度实现了一致性哈希算法，对数据进行分片，存储到对应的不同的redis实例中。 Jedis对Sharded的实现主要是在ShardedJedis.java和ShardedJedisPool.java中。本文主要介绍ShardedJedis的实现，ShardedJedisPool是基于apache的common-pool2的对象池实现。
继承关系 ShardedJedis&amp;mdash;&amp;gt;BinaryShardedJedis&amp;mdash;&amp;gt;Sharded &amp;lt;Jedis, JedisShardInfo&amp;gt;
构造函数 查看其构造函数
public ShardedJedis(List&amp;lt;JedisShardInfo&amp;gt; shards, Hashing algo, Pattern keyTagPattern) { super(shards, algo, keyTagPattern); } 构造器参数解释：
  shards是一个JedisShardInfo的列表，一个JedisShardedInfo类代表一个数据分片的主体。
  algo是用来进行数据分片的算法
  keyTagPattern，自定义分片算法所依据的key的形式。例如，可以不针对整个key的字符串做哈希计算，而是类似对**thisisa{key}**中包含在大括号内的字符串进行哈希计算。
  JedisShardInfo是什么样的？
public class JedisShardInfo extends ShardInfo&amp;lt;Jedis&amp;gt; { public String toString() { return host + &amp;#34;:&amp;#34; + port + &amp;#34;*&amp;#34; + getWeight(); } private int connectionTimeout; private int soTimeout; private String host; private int port; private String password = null; private String name = null; // Default Redis DB  private int db = 0; public String getHost() { return host; } public int getPort() { return port; } public JedisShardInfo(String host) { super(Sharded.</description>
    </item>
    
    <item>
      <title>Jedis的JedisSentinelPool源代码分析</title>
      <link>/2015/jedis-sentinel-pool-explain/</link>
      <pubDate>Mon, 20 Apr 2015 18:50:36 +0800</pubDate>
      
      <guid>/2015/jedis-sentinel-pool-explain/</guid>
      <description>概述 Jedis是Redis官方推荐的Java客户端，更多Redis的客户端可以参考Redis官网客户端列表。Redis-Sentinel作为官方推荐的HA解决方案，Jedis也在客户端角度实现了对Sentinel的支持，主要实现在JedisSentinelPool.java这个类中，下文会分析这个类的实现。
属性 JedisSentinelPool类里有以下的属性：
//基于apache的commom-pool2的对象池配置 protected GenericObjectPoolConfig poolConfig; //超时时间，默认是2000 protected int timeout = Protocol.DEFAULT_TIMEOUT; //sentinel的密码 protected String password; //redis数据库的数目 protected int database = Protocol.DEFAULT_DATABASE; //master监听器，当master的地址发生改变时，会触发这些监听者 protected Set&amp;lt;MasterListener&amp;gt; masterListeners = new HashSet&amp;lt;MasterListener&amp;gt;(); protected Logger log = Logger.getLogger(getClass().getName()); //Jedis实例创建工厂 private volatile JedisFactory factory; //当前的master，HostAndPort是一个简单的包装了ip和port的模型类 private volatile HostAndPort currentHostMaster; 构造器 构造器的代码如下：
public JedisSentinelPool(String masterName, Set&amp;lt;String&amp;gt; sentinels, final GenericObjectPoolConfig poolConfig, int timeout, final String password, final int database) { this.poolConfig = poolConfig; this.timeout = timeout; this.</description>
    </item>
    
    <item>
      <title>redis sentinel 机制与用法</title>
      <link>/2015/redis-sentinel/</link>
      <pubDate>Fri, 17 Apr 2015 22:08:56 +0800</pubDate>
      
      <guid>/2015/redis-sentinel/</guid>
      <description>本文参考自《Redis Sentinel Documentation》
 概述 Redis-Sentinel是Redis官方推荐的高可用性(HA)解决方案，当用Redis做Master-slave的高可用方案时，假如master宕机了，Redis本身(包括它的很多客户端)都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自动切换。
它的主要功能有以下几点
 不时地监控redis是否按照预期良好地运行; 如果发现某个redis节点运行出现状况，能够通知另外一个进程(例如它的客户端); 能够进行自动切换。  当一个master节点不可用时，能够选举出master的多个slave(如果有超过一个slave的话)中的一个来作为新的master，其它的slave节点会将它所追随的master的地址改为被提升为master的slave的新地址。
Sentinel支持集群 很显然，只使用单个sentinel进程来监控redis集群是不可靠的，当sentinel进程宕掉后(sentinel本身也有单点问题，single-point-of-failure)整个集群系统将无法按照预期的方式运行。所以有必要将sentinel集群，这样有几个好处：
 即使有一些sentinel进程宕掉了，依然可以进行redis集群的主备切换； 如果只有一个sentinel进程，如果这个进程运行出错，或者是网络堵塞，那么将无法实现redis集群的主备切换（单点问题）; 如果有多个sentinel，redis的客户端可以随意地连接任意一个sentinel来获得关于redis集群中的信息。  Sentinel版本 Sentinel当前最新的稳定版本称为Sentinel 2(与之前的Sentinel 1区分开来）。随着redis2.8的安装包一起发行。安装完Redis2.8后，可以在**redis2.8/src/**里面找到Redis-sentinel的启动程序。
 强烈建议： 如果你使用的是redis2.6(sentinel版本为sentinel 1)，你最好应该使用redis2.8版本的sentinel 2，因为sentinel 1有很多的Bug，已经被官方弃用，所以强烈建议使用redis2.8以及sentinel 2。
 运行Sentinel 运行sentinel有两种方式：
 第一种  redis-sentinel /path/to/sentinel.conf  第二种  redis-server /path/to/sentinel.conf --sentinel 以上两种方式，都必须指定一个sentinel的配置文件sentinel.conf，如果不指定，将无法启动sentinel。sentinel默认监听26379端口，所以运行前必须确定该端口没有被别的进程占用。
Sentinel的配置 Redis源码包中包含了一个sentinel.conf文件作为sentinel的配置文件，配置文件自带了关于各个配置项的解释。典型的配置项如下所示：
sentinel monitor mymaster 127.0.0.1 6379 2 sentinel down-after-milliseconds mymaster 60000 sentinel failover-timeout mymaster 180000 sentinel parallel-syncs mymaster 1 sentinel monitor resque 192.</description>
    </item>
    
  </channel>
</rss>